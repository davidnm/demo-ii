{"version":3,"sources":["components/Contact/index.jsx","components/ContactList/index.jsx","components/Modal/index.jsx","constants/index.js","components/Input/index.jsx","components/Form/index.jsx","components/ContactManager/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Contact","name","phone","email","aria-label","role","ContactList","className","listOfContacts","length","map","contact","Modal","children","isActive","onClick","INITIAL_VALUE","Input","id","props","htmlFor","requiredFields","Object","keys","Form","data","onSubmit","useState","formData","setFormData","onChange","event","target","value","stopPropagation","preventDefault","field","Key","type","ContactManager","isExpanded","setIsExpanded","App","contacts","setContacts","filter","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAcmBA,G,MAVH,SAAC,GAAD,QAAEC,YAAF,MAFM,MAEN,MAAwBC,aAAxB,MAFM,MAEN,MAA+CC,aAA/C,MAFM,MAEN,SAChB,4BACA,4BAAKF,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAI,0BAAMC,aAAW,OAAOC,KAAK,OAA7B,uBACJ,4BAAI,0BAAMD,aAAW,SAASC,KAAK,OAA/B,cCcWC,G,MApBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,IAAcC,sBAAd,MAA+B,GAA/B,SAClB,2BAAOD,UAAS,2BAAsBA,EAAS,WAAOA,GAAP,KAC7C,+BACE,4BACE,oCACA,qCACA,qCACA,oCACA,wCAGJ,+BACGC,EAAeC,OACdD,EAAeE,KAAI,SAACC,GAAD,OACnB,kBAAC,EAAYA,MACT,gECZGC,G,YAJD,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,SAAUC,EAAtB,EAAsBA,QAAtB,OACd,yBAAKR,UAAS,eAAUO,EAAW,UAAY,IAAMC,QAASA,GAAUF,K,cCJ3DG,G,MAAgB,CAACf,KAAM,GAAIC,MAAO,GAAIC,MAAO,K,OCc3Cc,G,MAXD,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAOC,EAAV,6BACV,oCACCD,GACG,2BAAOX,UAAU,cAAca,QAASF,GAAxC,UACQA,EADR,OAIA,yCAAOA,GAAIA,EAAIX,UAAU,eAAkBY,OCL7CE,EAAiBC,OAAOC,KAAKP,GA6BpBQ,EA3BF,SAAC,GAAoC,IAAD,IAAlCC,YAAkC,MAA7BT,EAA6B,EAAdU,EAAc,EAAdA,SAAc,EACjBC,mBAASF,GADQ,mBAC1CG,EAD0C,KAChCC,EADgC,KAE3CC,EAAW,SAACC,GAEdF,EAAY,eAAID,EAAL,eAAgBG,EAAMC,OAAOd,GAAKa,EAAMC,OAAOC,UAQ9D,OACI,0BAAMlB,QAPM,SAACgB,GAAD,OAAWA,EAAMG,mBAOL3B,UAAU,OAAOmB,SANrB,SAACK,GACrBA,EAAMI,iBACNT,EAASE,KAKJP,EAAeX,KAAI,SAAC0B,GAAD,OACpB,kBAAC,EAAD,CACAC,IAAKD,EACLlB,GAAIkB,EACJN,SAAUA,EACVG,MAAOL,EAASQ,QAGhB,kBAAC,EAAD,CAAOE,KAAK,SAASL,MAAM,aCRpBM,EAhBQ,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,EACDC,oBAAS,GADR,mBAC9Ba,EAD8B,KAClBC,EADkB,KAE/B1B,EAAU,kBAAM0B,GAAeD,IAErC,OACE,oCACE,yBAAKjC,UAAU,sBAAsBQ,QAASA,GAA9C,KAGA,kBAAC,EAAD,CAAOA,QAASA,EAASD,SAAU0B,GACnC,kBAAC,EAAD,CAAMd,SAAUA,OCUPgB,EArBH,WAAO,IAAD,EACgBf,mBAAS,IADzB,mBACTgB,EADS,KACCC,EADD,KAahB,OACA,yBAAKrC,UAAU,OACb,kBAAC,EAAD,CAAiBmB,SARC,SAACD,GACnBmB,EACED,EAASE,QAAO,SAAClC,GAAD,OAAaA,EAAQV,OAASwB,EAAKxB,QAAM6C,OAAOrB,OAOlE,kBAAC,EAAD,CAAajB,eAAgBmC,MCRbI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e5676f6c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst DEFAULT_VALUE = 'N/A'\r\n\r\nconst Contact = ({name = DEFAULT_VALUE, phone = DEFAULT_VALUE, email=DEFAULT_VALUE}) => (\r\n<tr>\r\n<td>{name}</td>\r\n<td>{phone}</td>\r\n<td>{email}</td>\r\n<td><span aria-label=\"edit\" role=\"img\">üñãÔ∏è</span></td>\r\n<td><span aria-label=\"delete\" role=\"img\">‚ùå</span></td>\r\n    </tr>\r\n    )\r\n\r\n    export default Contact","import React from \"react\";\r\nimport \"./ContactList.css\";\r\nimport Contact from \"../Contact\";\r\n\r\nconst ContactList = ({ className, listOfContacts = [] }) => (\r\n  <table className={`contact-list-base${className ? ` ${className}` : ``}`}>\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Phone</th>\r\n        <th>Email</th>\r\n        <th>Edit</th>\r\n        <th>Remove</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {listOfContacts.length \r\n      ? listOfContacts.map((contact) => (\r\n        <Contact {...contact} />\r\n      )) :  <tr>No contacts present here yet</tr> }\r\n    </tbody>\r\n  </table>\r\n);\r\n\r\nexport default ContactList;\r\n","import React from 'react'\r\nimport './Modal.css'\r\n\r\nconst Modal = ({children, isActive, onClick}) => (\r\n<div className={`modal${isActive ? ' active' : ''}`} onClick={onClick}>{children}</div>\r\n)\r\n\r\nexport default Modal\r\n","export const INITIAL_VALUE = {name: '', phone: '', email: ''}","import React from \"react\";\r\nimport \"./Input.css\";\r\n\r\nconst Input = ({ id, ...props}) => (\r\n    <>\r\n    {id && (\r\n        <label className='input-label' htmlFor={id}>\r\n            {`${id}: `}\r\n        </label>\r\n    )}\r\n        <input id={id} className='input-input' {...props} />\r\n    </>\r\n);\r\n\r\nexport default Input;","import React, { useState } from 'react'\r\nimport './Form.css'\r\nimport { INITIAL_VALUE } from '../../constants'\r\nimport Input from '../Input'\r\n\r\nconst requiredFields = Object.keys(INITIAL_VALUE)\r\n\r\nconst Form = ({data=INITIAL_VALUE, onSubmit}) => {\r\nconst [formData, setFormData] = useState(data)\r\nconst onChange = (event) => {\r\n    \r\n    setFormData({...formData, [event.target.id]: event.target.value})}\r\n\r\nconst onClick = (event) => event.stopPropagation()\r\nconst onSubmitWrapper = (event) => {\r\n    event.preventDefault()\r\n    onSubmit(formData)\r\n}\r\n\r\nreturn (\r\n    <form onClick={onClick} className='form' onSubmit={onSubmitWrapper}>\r\n        {requiredFields.map((field) => (\r\n        <Input\r\n        Key={field} \r\n        id={field} \r\n        onChange={onChange} \r\n        value={formData[field]} \r\n        />\r\n        ))}\r\n        <Input type=\"submit\" value=\"SUBMIT\" />\r\n    </form>\r\n)\r\n}\r\n\r\nexport default Form","import React, { useState } from \"react\";\r\nimport \"./ContactManager.css\";\r\nimport Modal from \"../Modal\";\r\nimport Form from \"../Form\"\r\n\r\nconst ContactManager = ({onSubmit}) => {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const onClick = () => setIsExpanded(!isExpanded);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"contact-manager-add\" onClick={onClick}>\r\n        +\r\n      </div>\r\n      <Modal onClick={onClick} isActive={isExpanded}>\r\n      <Form onSubmit={onSubmit} />\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactManager;\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport { ContactList, ContactMananger } from './components';\n\nconst App = () => {\n  const [contacts, setContacts] = useState([\n//{name:\"pippi\", phone: \"12345678\", email: \"pippi@cat.com\"},\n//{name:\"cat\", phone: \"23456789\", email: \"shameless_napper@pippi.com\"},\n//{name:\"feline\", phone: \"34567890\",  email: \"bestcat@felineworld.com\"},\n  ])\n\n  const addContacts = (data) => {\n    setContacts(\n      contacts.filter((contact) => contact.name !== data.name).concat(data),\n            )\n  }\n\n  return (\n  <div className=\"app\">\n    <ContactMananger onSubmit={addContacts}/>\n    <ContactList listOfContacts={contacts} />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}